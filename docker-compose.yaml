networks:
  spring-market:
    driver: bridge

services:
  kafka-1:
    image: bitnami/kafka:latest
    container_name: kafka-1
    hostname: kafka-1
    ports:
      - "9092:9092"
    stop_grace_period: 30s
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091

      KAFKA_LISTENERS: PLAINTEXT://:9090,CONTROLLER://:9091
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9090
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
    networks:
      - spring-market
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9090 || exit 1"]
      interval: 30s
      timeout: 120s
      retries: 5
      start_period: 120s
    volumes:
      - kafka-1_data:/bitnami/kafka

  kafka-2:
    image: bitnami/kafka:latest
    container_name: kafka-2
    hostname: kafka-2
    ports:
      - "9094:9094"
    stop_grace_period: 30s
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091

      KAFKA_LISTENERS: PLAINTEXT://:9090,CONTROLLER://:9091
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9090
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
    networks:
      - spring-market
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9090 || exit 1"]
      interval: 30s
      timeout: 120s
      retries: 5
      start_period: 120s
    volumes:
      - kafka-2_data:/bitnami/kafka

  kafka-3:
    image: bitnami/kafka:latest
    container_name: kafka-3
    hostname: kafka-3
    ports:
      - "9096:9096"
    stop_grace_period: 30s
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091

      KAFKA_LISTENERS: PLAINTEXT://:9090,CONTROLLER://:9091
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9090
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
    networks:
      - spring-market
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9090 || exit 1"]
      interval: 30s
      timeout: 120s
      retries: 5
      start_period: 120s
    volumes:
      - kafka-3_data:/bitnami/kafka

  redis:
    image: redis:8.2-m01
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - redis_data:/data
    networks:
      - spring-market

  postgres:
    container_name: postgres
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - spring-market
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-db:
    image: mongo:4.4
    container_name: mongo-db
    ports:
      - "27017:27017"
    restart: always
    networks:
      - spring-market
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak-db:
    image: postgres:latest
    container_name: keycloak-db
    restart: always
    ports:
      - "5400:5432"
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - spring-market
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d keycloak" ]
      start_period: 20s
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    mem_limit: 2g
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: start-dev
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    environment:
      KC_PROXY: edge
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true

      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
    ports:
      - "9000:8080"
    volumes:
      - ./providers:/opt/keycloak/providers
    restart: on-failure
    depends_on:
      keycloak-db:
        condition: service_healthy
    networks:
      - spring-market

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    restart: on-failure:3
    networks:
      - spring-market
    healthcheck:
      start_period: 25s
      test: [ ]

  config-server:
    build:
      context: ./services/ConfigServer
      dockerfile: Dockerfile
    container_name: config-server
    restart: on-failure
    ports:
      - "8888:8888"
    networks:
      - spring-market
    environment:
      SPRING_PROFILES_ACTIVE: native
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8888/actuator/health || exit 1" ]
      start_period: 15s
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - /home/cryptic/IdeaProjects/SpringMarket/config:/config
    depends_on:
      zipkin:
        condition: service_healthy

  eureka-server:
    build:
      context: ./services/EurekaServer
      dockerfile: Dockerfile
    container_name: eureka-server
    restart: on-failure
    ports:
      - "8761:8761"
    networks:
      - spring-market
    environment:
      SPRING_PROFILES_ACTIVE: dev
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8761/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy

  gateway:
    build:
      context: ./services/Gateway
      dockerfile: Dockerfile
    container_name: gateway
    restart: always
    ports:
      - "8080:8080"
    networks:
      - spring-market
    environment:
      SPRING_PROFILES_ACTIVE: dev
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1" ]
      interval: 15s
      timeout: 5s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      keycloak:
        condition: service_started

  #  vault:
  #    container_name: vault
  #    image: vault:1.13.3
  #    restart: always
  #    ports:
  #      - "8200:8200"
  #    environment:
  #      VAULT_DEV_ROOT_TOKEN_ID: root
  #      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
  #    cap_add:
  #      - IPC_LOCK
  #    networks:
  #      - spring-market

  analytic-service:
    build:
      context: ./services/AnalyticService
      dockerfile: Dockerfile
    container_name: analytic-service
    restart: on-failure:3
    ports:
      - "8085:8085"
    networks:
      - spring-market
    environment:
      SPRING_PROFILES_ACTIVE: dev
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8085/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy

  cart-service:
    build:
      context: ./services/CartService
      dockerfile: Dockerfile
    container_name: cart-service
    restart: on-failure:3
    ports:
      - "8084:8084"
    networks:
      - spring-market
    environment:
      SPRING_PROFILES_ACTIVE: dev
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8084/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy

  notification-service:
    build:
      context: ./services/NotificationService
      dockerfile: Dockerfile
    container_name: notification-service
    restart: on-failure:3
    ports:
      - "8089:8089"
    networks:
      - spring-market
    environment:
      SPRING_PROFILES_ACTIVE: dev
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8089/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy

  order-service:
    build:
      context: ./services/OrderService
      dockerfile: Dockerfile
    container_name: order-service
    restart: on-failure:3
    ports:
      - "8082:8082"
    networks:
      - spring-market
    environment:
      SPRING_PROFILES_ACTIVE: dev
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8082/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy

  payment-service:
    build:
      context: ./services/PaymentService
      dockerfile: Dockerfile
    container_name: payment-service
    restart: on-failure:3
    ports:
      - "8088:8088"
    networks:
      - spring-market
    environment:
      SPRING_PROFILES_ACTIVE: dev
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8088/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy

  product-service:
    build:
      context: ./services/ProductService
      dockerfile: Dockerfile
    container_name: product-service
    restart: on-failure:3
    ports:
      - "8081:8081"
    networks:
      - spring-market
    environment:
      SPRING_PROFILES_ACTIVE: dev
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8081/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy

  review-service:
    build:
      context: ./services/ReviewService
      dockerfile: Dockerfile
    container_name: review-service
    restart: on-failure:3
    ports:
      - "8083:8083"
    networks:
      - spring-market
    environment:
      SPRING_PROFILES_ACTIVE: dev
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8083/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy

  saga-service:
    build:
      context: ./services/SagaService
      dockerfile: Dockerfile
    container_name: saga-service
    restart: on-failure:3
    ports:
      - "8090:8090"
    networks:
      - spring-market
    environment:
      SPRING_PROFILES_ACTIVE: dev
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8090/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy

  user-service:
    build:
      context: ./services/UserService
      dockerfile: Dockerfile
    container_name: user-service
    restart: on-failure:3
    ports:
      - "8086:8086"
    networks:
      - spring-market
    environment:
      SPRING_PROFILES_ACTIVE: dev
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8086/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy

volumes:
  keycloak_data:
    driver: local
  redis_data:
  mongo_data:
  postgres_data:
  kafka-1_data:
    driver: local
  kafka-2_data:
    driver: local
  kafka-3_data:
    driver: local